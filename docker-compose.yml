
services:
  minio:
    image: minio/minio:latest
    container_name: observability-minio
    ports:
      - "9002:9000"   # MinIO API (avoiding conflict with port 9000)
      - "9003:9001"   # MinIO Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  otel-collector:
    image: otel/opentelemetry-collector:0.121.0
    #logging:
    #  driver: loki
    #  options:
    #    loki-url: ${LOKI_URL}
    volumes:
      - ./otel-config.yaml:/etc/otel/config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - '--config=/etc/otel/config.yaml'
    ports:
      - "4317:4317" #grpc
      - "4318:4318" #http
    depends_on:
      - loki
      - minio
  loki:
    image: grafana/loki:3.4.2
    environment:
      S3_ENDPOINT: ${S3_ENDPOINT}
      AWS_REGION: ${AWS_REGION}
      BUCKET_NAME: ${BUCKET_NAME}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    #logging:
    #  driver: loki
    #  options:
    #    loki-url: ${LOKI_URL}
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
    command: 
      -config.file=/etc/loki/local-config.yaml
      -config.expand-env=true
    
  mimir:
    image: grafana/mimir:2.16.0
    #logging:  
    #  driver: loki
    #  options:
    #    loki-url: ${LOKI_URL}
    ports:
      - "9009:9009"
    volumes:
      - ./mimir-config.yml:/etc/mimir/mimir-config.yml
      - mimir-data:/data
    command:
      - --config.file=/etc/mimir/mimir-config.yml
      - -config.expand-env=true
    environment:
      S3_ENDPOINT: ${S3_ENDPOINT}
      AWS_REGION: ${AWS_REGION}
      BUCKET_NAME: ${BUCKET_NAME}
      EXTRA_BUCKET_NAME: ${EXTRA_BUCKET_NAME}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    depends_on:
      minio:
        condition: service_healthy
    
  grafana:
    image: grafana/grafana:11.5.0
    #logging:
    #  driver: loki
    #  options:
    #    loki-url: ${LOKI_URL}
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
      - GF_FEATURE_TOGGLES_ENABLE=accessControlOnCall
      - GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-lokiexplore-app/grafana-lokiexplore-app-latest.zip;grafana-lokiexplore-app
    ports:
      - 3000:3000/tcp
    volumes:
      - ./grafana:/etc/grafana/provisioning
    
  prometheus:
    image: prom/prometheus:v2.52.0
    #logging:
    #  driver: loki
    #  options:
    #    loki-url: ${LOKI_URL}
    ports:
      - "9092:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - loki
    
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    #logging:
    #  driver: loki
    #  options:
    #    loki-url: ${LOKI_URL}
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
      - redis
  
  redis:
    image: redis:latest
    container_name: redis
    #logging:
    #  driver: loki
    #  options:
    #    loki-url: ${LOKI_URL}
    ports:
      - 6389:6389
  #tempo-init:
  #  image: grafana/tempo:main-a4289d9
  #  user: root
  #  entrypoint:
  #    - "chown"
  #    - "10001:10001"
  #    - "/var/tempo"
  #  volumes:
  #    - tempo-data:/var/tempo

  # Optional - Memcached for query acceleration
  memcached:
    image: memcached:1.6.29
    container_name: memcached
    ports:
      - "11211:11211"
    environment:
      - MEMCACHED_MAX_MEMORY=64m  # Set the maximum memory usage
      - MEMCACHED_THREADS=4       # Number of threads to use
    
  tempo:
    image: grafana/tempo:main-a4289d9
    container_name: tempo
    command: 
      - "-config.file=/etc/tempo/tempo-config.yaml"
      - "-config.expand-env=true"
    volumes:
      - ./tempo.yaml:/etc/tempo/tempo-config.yaml
      - tempo-data:/var/tempo
    environment:
      S3_ENDPOINT_TRIMMED: ${S3_ENDPOINT_TRIMMED}
      AWS_REGION: ${AWS_REGION}
      BUCKET_NAME: ${BUCKET_NAME}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    ports:
      - "3200:3200"   # Tempo HTTP endpoint
    depends_on:
      minio:
        condition: service_healthy
      memcached:
        condition: service_started
    


volumes:
  mimir-data:
  tempo-data:
    #driver: local
  minio-data: